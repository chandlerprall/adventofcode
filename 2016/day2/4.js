// const input = `
// ULL
// RRDDD
// LURDL
// UUUUD
// `;

const input = `
URULLLLLRLDDUURRRULLLDURRDRDRDLURURURLDLLLLRUDDRRLUDDDDDDLRLRDDDUUDUDLDULUDLDURDULLRDDURLLLRRRLLRURLLUDRDLLRRLDDRUDULRRDDLUUUDRLDLURRRULURRDLLLDDDLUDURDDRLDDDLLRULDRUDDDLUDLURUDLLRURRUURUDLLLUUUUDDURDRDDDLDRRUDURDLLLULUDURURDUUULRULUDRUUUUDLRLUUUUUDDRRDDDURULLLRRLDURLDLDRDLLLUULLRRLLLLDRLRDRRDRRUDDLULUUDDDDRRUUDDLURLRDUUDRRLDUDLRRRLRRUUDURDRULULRDURDRRRDLDUUULRDDLRLRDLUUDDUDDRLRRULLLULULLDDDRRDUUUDDRURDDURDRLRDLDRDRULRLUURUDRLULRLURLRRULDRLRDUDLDURLLRLUDLUDDURDUURLUDRLUL
LLLUUURUULDDDULRRDLRLLLLLLLLRURRDLURLUDRRDDULDRRRRRRLDURRULDDULLDDDRUUDLUDULLDLRRLUULULRULURDURLLDULURDUDLRRLRLLDULLRLDURRUULDLDULLRDULULLLULDRLDLDLDLDDLULRLDUDRULUDDRDDRLRLURURRDULLUULLDRRDRRDLDLLRDLDDUUURLUULDDRRRUULDULDDRDDLULUDRURUULLUDRURDRULDRUULLRRDURUDDLDUULLDDRLRRDUDRLRRRLDRLRULDRDRRUDRLLLDDUDLULLURRURRLUURDRLLDLLDUDLUUURRLRDDUDRLUDLLRULLDUUURDLUUUDUDULRLDLDRUUDULRDRRUDLULRLRDLDRRDDDUDLDLDLRUURLDLLUURDLDLRDLDRUDDUURLLLRDRDRRULLRLRDULUDDDLUDURLDUDLLRULRDURDRDLLULRRDLLLDUURRDUDDLDDRULRRRRLRDDRURLLRRLLL
DRURLDDDDRLUDRDURUDDULLRRLLRLDDRLULURLDURRLDRRLRLUURDDRRDLRDLDLULDURUDRLRUDULRURURLRUDRLLDDUDDRDLDRLLDDLRRDRUUULDUUDRUULRLLDLLULLLRRDRURDLDDRRDDUDDULLDUUULDRUDLDLURLDRURUDLRDDDURRLRDDUDLLLRRUDRULRULRRLLUUULDRLRRRLLLDLLDUDDUUDRURLDLRRUUURLUDDDRRDDLDDDDLUURDDULDRLRURLULLURRDRLLURLLLURDURLDLUDUUDUULLRLDLLLLULRDDLDUDUDDDUULURRLULDLDRLRDRLULLUDDUUUUURDRURLDUULDRRDULUDUDLDDRDLUDDURUDURLDULRUDRRDLRLRDRRURLDLURLULULDDUUDLRLLLLURRURULDDRUUULLDULDRDULDDDLLLRLULDDUDLRUDUDUDURLURLDDLRULDLURD
DRUDRDURUURDLRLUUUUURUDLRDUURLLDUULDUULDLURDDUULDRDDRDULUDDDRRRRLDDUURLRDLLRLRURDRRRDURDULRLDRDURUDLLDDULRDUDULRRLLUDLLUUURDULRDDLURULRURDDLRLLULUDURDRRUDLULLRLDUDLURUDRUULDUDLRDUDRRDULDDLDRLRRULURULUURDULRRLDLDULULRUUUUULUURLURLRDLLRRRRLURRUDLRLDDDLDRDRURLULRDUDLRLURRDRRLRLLDLDDLLRRULRLRLRUDRUUULLDUULLDDRLUDDRURLRLDLULDURLLRRLDLLRDDDUDDUULLUDRUDURLLRDRUDLUDLLUDRUUDLRUURRRLLUULLUUURLLLRURUULLDLLDURUUUULDDDLRLURDRLRRRRRRUDLLLRUUULDRRDLRDLLDRDLDDLDLRDUDLDDRDDDDRULRRLRDULLDULULULRULLRRLLUURUUUDLDLUDUDDDLUUDDDDUDDDUURUUDRDURRLUULRRDUUDDUDRRRDLRDRLDLRRURUUDRRRUUDLDRLRDURD
DDDLRURUDRRRURUUDLRLRDULDRDUULRURRRUULUDULDDLRRLLRLDDLURLRUDRLRRLRDLRLLDDLULDLRRURDDRDLLDDRUDRRRURRDUDULUDDULRRDRLDUULDLLLDRLUDRDURDRRDLLLLRRLRLLULRURUUDDRULDLLRULDRDLUDLULDDDLLUULRRLDDUURDLULUULULRDDDLDUDDLLLRRLLLDULRDDLRRUDDRDDLLLLDLDLULRRRDUDURRLUUDLLLLDUUULDULRDRULLRDRUDULRUUDULULDRDLDUDRRLRRDRLDUDLULLUDDLURLUUUDRDUDRULULDRDLRDRRLDDRRLUURDRULDLRRLLRRLDLRRLDLDRULDDRLURDULRRUDURRUURDUUURULUUUDLRRLDRDLULDURUDUDLUDDDULULRULDRRRLRURLRLRLUDDLUUDRRRLUUUDURLDRLRRDRRDURLLL
`;

const ROW_1 = 1;
const ROW_2 = 2;
const ROW_3 = 4;
const ROW_4 = 8;
const ROW_5 = 16;
const ROWS = [ROW_1, ROW_2, ROW_3, ROW_4, ROW_5];

const COL_1 = 32;
const COL_2 = 64;
const COL_3 = 128;
const COL_4 = 256;
const COL_5 = 512;
const COLS = [COL_1, COL_2, COL_3, COL_4, COL_5];

const rowColMap = {
	[ROW_1 | COL_1]: 'x',
	[ROW_1 | COL_2]: 'x',
	[ROW_1 | COL_3]: '1',
	[ROW_1 | COL_4]: 'x',
	[ROW_1 | COL_5]: 'x',

	[ROW_2 | COL_1]: 'x',
	[ROW_2 | COL_2]: '2',
	[ROW_2 | COL_3]: '3',
	[ROW_2 | COL_4]: '4',
	[ROW_2 | COL_5]: 'x',

	[ROW_3 | COL_1]: '5',
	[ROW_3 | COL_2]: '6',
	[ROW_3 | COL_3]: '7',
	[ROW_3 | COL_4]: '8',
	[ROW_3 | COL_5]: '9',

	[ROW_4 | COL_1]: 'x',
	[ROW_4 | COL_2]: 'A',
	[ROW_4 | COL_3]: 'B',
	[ROW_4 | COL_4]: 'C',
	[ROW_4 | COL_5]: 'x',

	[ROW_5 | COL_1]: 'x',
	[ROW_5 | COL_2]: 'x',
	[ROW_5 | COL_3]: 'D',
	[ROW_5 | COL_4]: 'x',
	[ROW_5 | COL_5]: 'x'
};

const clampValue = (x, min, max) => Math.min(Math.max(x, min), max);
const clamp = (x, pos) => {
	if (pos === 0 || pos === 4) return clampValue(x, 2, 2);
	if (pos === 1 || pos === 3) return clampValue(x, 1, 3);
	return clampValue(x, 0, 4);
};

function getCurrentRow(position) {
	return position & ROW_1 ? 0 :
		   position & ROW_2 ? 1 :
		   position & ROW_3 ? 2 :
		   position & ROW_4 ? 3 :
		   4;
}

function getCurrentColumn(position) {
	return position & COL_1 ? 0 :
		   position & COL_2 ? 1 :
		   position & COL_3 ? 2 :
		   position & COL_4 ? 3 :
		   4;
}

function changeRow(position, change) {
	const currentRow = getCurrentRow(position);
	const currentColumn = getCurrentColumn(position);
	const newRow = clamp(currentRow + change, currentColumn);

	position = position &~ 31; // remove any rows from the position
	position = position | ROWS[newRow]; // add the new row
	return position;
}

function changeColumn(position, change) {
	const currentRow = getCurrentRow(position);
	const currentColumn = getCurrentColumn(position);
	const newCol = clamp(currentColumn + change, currentRow);

	position = position &~ 992; // remove any cols from the position
	position = position | COLS[newCol]; // add the new col
	return position;
}

console.log(
	input
	.split(/\s+/)
	.filter(x => x)
	.reduce(
		(positions, command) => {
			positions.push(command.split('').reduce(
				(currentPosition, change) => {
					switch (change) {
						case 'U':
							return changeRow(currentPosition, -1);
						case 'D':
							return changeRow(currentPosition, 1);
						case 'L':
							return changeColumn(currentPosition, -1);
						case 'R':
							return changeColumn(currentPosition, 1);
					}
				},
				positions[positions.length-1]
			));
			return positions;
		},
		[ROW_3 | COL_1] // start middle of the pad, aka `5`
	)
	.slice(1)
	.map(position => rowColMap[position])
	.join('')
);